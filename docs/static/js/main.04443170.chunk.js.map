{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAc,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,cAAkB,EACPC,mBAAS,IADF,mBACpCC,EADoC,KACxBC,EADwB,KAc3C,OACI,sBAAMC,SARW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAQ,IAC1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAe,MAInB,SACI,uBACAO,KAAK,OACLC,MAAQT,EACPU,SAhBiB,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCNnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAETC,EAFS,+CAEqCC,UAAWH,GAFhD,+DAGII,MAAMF,GAHV,cAGTG,EAHS,gBAIMA,EAAKC,OAJX,uBAIRC,EAJQ,EAIRA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAV3B,kBAaRM,GAbQ,4CAAH,sDCCPO,EAAc,SAAC,GAAgB,IAAfH,EAAc,EAAdA,MAAMV,EAAQ,EAARA,IAG/B,OACI,sBAAKc,UAAU,8CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAc,IAAbnB,EAAY,EAAZA,SAAY,ECFT,SAAEA,GAAa,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KA6BtC,OAtBJC,qBAAW,WAEPxB,EAAQC,GACHwB,MAAO,SAAAd,GAGAY,EAAS,CACLf,KAAMG,EACNU,SAAS,SAK1B,CAACpB,IASOqB,EDxBsBI,CAAazB,GAA9Ba,EAHqB,EAG1BN,KAAYa,EAHc,EAGdA,QASnB,OACA,qCACI,oBAAIJ,UAAY,wCAAhB,SAAyDhB,IAExDoB,GAAW,mBAAGJ,UAAW,mCAAd,qBACZ,qBAAKA,UAAU,YAAf,SAGYH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEvBpBe,EAAe,WAAO,IAAD,EAEMxC,mBAAS,CAAC,kBAFhB,mBAEvByC,EAFuB,KAEX1C,EAFW,KAI9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ0C,EAAWlB,KAAM,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCXlC4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.04443170.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategorias}) =>{\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange = (e) =>{\r\n        setinputValue (e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        if (inputValue.trim().length >2){\r\n            setCategorias( cats =>([inputValue,...cats]));\r\n            setinputValue ('');\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n            type=\"Text\"\r\n            value= {inputValue}\r\n             onChange={handleInputChange}\r\n             />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setCategorias: PropTypes.func.isRequired\r\n}","\r\nexport const getGifs = async (category) => {\r\n\r\n        const url = `https:api.giphy.com/v1/gifs/search?q=${encodeURI (category)}&limit=10&api_key=v1lLrPo3SHhhdNUyP5OogpbcnzPrbyOd`;\r\n        const resp = await fetch(url);\r\n        const {data} = await resp.json();\r\n\r\n        const gifs = data.map(img =>{\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n        return gifs;\r\n\r\n    }","import React from 'react'\r\n\r\nexport const GifGridItem = ({title,url}) =>{\r\n\r\n    // console.log ({id,title,url});\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInLeft \">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}","import React from 'react' //{ useState, useEffect }\r\nimport { useFetchGifs } from './hooks/useFetchGifs'\r\nimport { GifGridItem } from './components/GifGridItem';\r\n// import { getGifs } from './helpers/getGifs';\r\n\r\nexport const GifGrid = ({category})=>{\r\n\r\n    // const [images, setimages] = useState([]);\r\n    const {data:images,loading}= useFetchGifs(category);\r\n\r\n\r\n    // useEffect( ()=> {\r\n    //     getGifs( category)\r\n    //         .then (setimages);\r\n    // }, [category])\r\n\r\n\r\n    return(\r\n    <>\r\n        <h3 className = 'animate__animated animate__backInDown'>{category}</h3>\r\n        {/* Es el titulo que aparece tras buscar */}\r\n        {loading && <p className= 'animate__animated animate__flash'>Loading</p>}\r\n        <div className=\"card-grid\">\r\n\r\n                {\r\n                    images.map( img=> (\r\n                        <GifGridItem \r\n                        key={img.id}\r\n                        {...img}\r\n                        />\r\n                    ))\r\n                }\r\n        </div>\r\n    </>\r\n    )\r\n}","import {useState,useEffect} from 'react'\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category) =>{\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\nuseEffect( () => {\r\n    \r\n    getGifs(category )\r\n        .then ( img =>{\r\n\r\n\r\n                setstate({\r\n                    data: img,\r\n                    loading: false\r\n                })\r\n\r\n        })\r\n\r\n}, [category])\r\n\r\n    // setTimeout(() => {\r\n    //     setstate({\r\n    //         data: [1,2,3,4,5,6],\r\n    //         loading: false\r\n    //     })\r\n    // }, 3000);\r\n\r\n    return state // {data: [], loading true};\r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categorias, setCategorias] = useState(['One Punch Man']);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategorias={setCategorias}/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                { //El map me sirve para transformar cada uno de los elementos que estan dentro del arreglo\r\n                    categorias.map ( category => (\r\n                        <GifGrid \r\n                            key= {category}\r\n                            category= {category} />\r\n                            ))//<li key={category}> {category}</li>)\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}